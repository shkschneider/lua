require "luax"
require "_base"
require "_enum"

local function _print(first, second)
  print(tostring(first) .. "\t" .. tostring(second))
end

print("--[[Array]]--")
_print("type(Array)", type(luax.Array))
local array = luax.Array:new(1, 2, 3, 4, 5, 6, 7, 8, 9)
_print("Array:new()", array)
_print("Array:pushfirst()", array:copy():pushfirst("0"))
_print("Array:pushlast()", array:copy():pushlast("10"))
_print("Array:popfirst()", array:copy():popfirst())
_print("Array:poplast()", array:copy():poplast())
_print("Array:first()", array:first())
_print("Array:last()", array:last())
_print("Array:each()", array:each(function (v) return v end))
_print("Array:all(<10)", array:all(function (v) return v < 10 end))
_print("Array:count(<10)", array:count(function (v) return v < 10 end))
_print("Array:any(<10)", array:any(function (v) return v < 10 end))
_print("Array:none(<10)", array:none(function (v) return v < 10 end))
_print("Array:contains(10)", array:contains(10))
_print("Array:map('_' + v)", array:copy():map(function (v) return "_" .. v end))
_print("Array:filter(v%2==0)", array:filter(function (v) return tonumber(v) % 2 == 0 end))
_print("Array:split(5)", array:split(5))
_print("Array:invert()", array:invert())
_print("Array:remove(1)", array:copy():remove(1))
_print("Array:clear()", array:copy():clear())
_print("Array:join()", array:join())
_print("Array:join('-')", array:join("-"))

print("")
print("--[[Enum]]--")
_print("type(Enum)", type(Enum))
_print("Enum.ONE", Enum.ONE)
_print("Enum.TWO", Enum.TWO)
_print("Enum.THREE", Enum.THREE)

print("")
print("--[[Class]]--")
_print("type(Class)", type(luax.Class))
_print("Class:constructor(...)", function (...) end)
local Animal = luax.Class:new("Animal")
function Animal:constructor(planet)
  self.planet = planet or "earth"
end
local animal = Animal()
_print("Animal=Class:new('Animal')", "")
local Dog = Animal:extend("Dog")
_print("Dog=Animal:extend('Dog')", "")
local anyDog = Dog()
_print("anyDog=Dog()", anyDog)
local myDog = Dog()
_print("myDog=Dog()", myDog)
_print("myDog.super", myDog.super)
local Alien = Animal:extend("Alien")
_print("Alien=Animal:extend('Alien')", "")
local alien = Alien("pluto")
_print("alien=Alien('pluto')", alien)
_print("myDog:is(Alien)", myDog:is(Alien))
_print("alien:is(Animal)", alien:is(Animal))
_print("alien.planet", alien.planet)

print("")
print("--[[Fifo]]--")
_print("type(Fifo)", type(luax.Fifo))
local fifo = luax.Fifo(2)
_print("Fifo(2)", fifo)
fifo:push(1)
_print("fifo:push(1)", fifo)
fifo:push(2)
_print("fifo:push(2)", fifo)
fifo:push(3)
_print("fifo:push(3)", fifo)
fifo:clear()
_print("fifo:clear()", fifo)

print("")
print("--[[Hash]]--")
_print("hash(42)", luax.hash(42))

print("")
print("--[[Log]]--")
_print("type(Log)", type(luax.Log))
_print("Log.FILENAME", luax.Log.FILENAME)
_print("Log.FILE", luax.Log.FILE)
_print("Log.verbose(...)", luax.Log.verbose)
_print("Log.debug(...)", luax.Log.debug)
_print("Log.info(...)", luax.Log.info)
_print("Log.warning(...)", luax.Log.warning)
_print("Log.error(...)", luax.Log.error)
_print("Log.wtf(...)", luax.Log.wtf)
_print("Log.close()", luax.Log.close)

print("")
print("--[[Path]]--")
_print("type(Path)", type(luax.Path))
_print("Path.root", luax.Path.root)
_print("Path.dirname(Path.root)", luax.Path.dirname(luax.Path.root))
_print("Path.basename(Path.root)", luax.Path.basename(luax.Path.root))
_print("Path.dirname(main.lua)", luax.Path.dirname(luax.Path.root .. "/main.lua"))
_print("Path.split(Path.root)", luax.Path.split(luax.Path.root))

print("")
print("--[[Signal]]--")
local signal = luax.Signal()
local callback = function () print("signal received!") end
_print("signal.register(1,f())", signal:register(1, callback))
_print("signal.register(2,f())", signal:register(2, callback))
_print("signal.register(1,f())", signal:register(1, callback))
_print("signal.send(1)", signal:send(1))
_print("signal.unregister(1)", signal:unregister(1))
_print("signal.send(1)", signal:send(1))
_print("signal.send(2)", signal:send(2))

print("")
print("--[[String]]--")
local s = "Lorem ipsum"
_print("string:", s)
_print("explode()", luax.explode(s))
_print("starts('Lorem')", luax.starts(s, "Lorem"))
_print("ends('Ipsum')", luax.ends(s, "Ipsum"))
_print("ends('ipsum')", luax.ends(s, "ipsum"))
_print("trim()", luax.trim(s .. "\n"))
_print("pad(".. #s * 2 ..",'_')", luax.pad(s, #s * 2, "_"))
_print("capitalize()", luax.capitalize(s:lower()))
_print("lines('hello\\nworld')", luax.lines("hello\nworld"))
_print("lines('hello world', ' ')", luax.lines("hello\nworld", " "))
_print("join(',','lorem','ipsum')", luax.join(",", "lorem", "ipsum"))

print("")
print("--[[Utils]]--")
_print("tostring({...})", tostring({"a", "b", "c"}))
_print("loop(2,f(i))", "")
luax.loop(2, function (i) _print("", i) end)
_print("math.randomseed", math.randomseed)
_print("randomboolean()", luax.randomboolean())
_print("randomtable({1,2,3})", luax.randomtable({1, 2, 3}))
_print("math.clamp(1,9,10)", math.clamp(1, 9,10))
_print("math.sign(10)", math.sign(-10))
_print("range(0,-5)", luax.range(0,-5))
_print("range(1,10,2)", luax.range(1, 10, 2))

print("")
print("--[[Version]]--")
print("type(Version)", type(luax.Version))
local oldVersion = luax.Version(1,2,3)
_print("oldVersion=Version(1,2,3)", oldVersion)
_print("oldVersion.major", oldVersion.major)
_print("oldVersion.minor", oldVersion.minor)
_print("oldVersion.patch", oldVersion.patch)
local newVersion = luax.Version(3,2,1)
_print("newVersion=Version(3,2,1)", newVersion)
_print("newVersion<oldVersion", newVersion < oldVersion)
_print("newVersion>oldVersion", newVersion > oldVersion)
_print("oldVersion==newVersion", oldVersion == newVersion)
_print("newVersion==newVersion", newVersion == newVersion)
