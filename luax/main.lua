require "luax"
require "_enum"

local function _print(first, second)
  print(tostring(first) .. "\t" .. tostring(second))
end

local function try(s, f)
  _print(s, f())
end

print("--[[Class]]--")

_print("Class", "Base")
try("type(Class)", function ()
  assert(type(Class) == "class")
  return type(Class)
end)
try("Class.super", function ()
  assert(Class.super == nil)
  return Class.super
end)
try("Class.constructor", function ()
  assert(Class.constructor ~= nil)
  return Class.constructor
end)

_print("Class", "Inheritance")
-- Classes
FirstClass = luax.Class:new()
try("FirstClass=luax.Class:new()", function ()
  assert(FirstClass.__type == "class")
  assert(FirstClass.super == Class)
  return FirstClass
end)
function FirstClass:constructor()
  self.n = 1
end
try("FirstClass.constructor", function ()
  assert(FirstClass.constructor ~= nil)
  return FirstClass.constructor
end)
firstClass = FirstClass()
try("firstClass=FirstClass()", function ()
  assert(firstClass.__type == "class")
  assert(firstClass.super == Class)
  assert(firstClass.n == 1)
  return firstClass
end)
SecondClass = FirstClass:new()
try("SecondClass=FirstClass:new()", function ()
  assert(type(SecondClass) == "class")
  assert(SecondClass.super == FirstClass)
  return SecondClass
end)
secondClass = SecondClass()
try("secondClass=SecondClass()", function ()
  assert(type(secondClass) == "class")
  assert(secondClass.super == FirstClass)
  assert(secondClass.n == 1)
  return secondClass
end)
function SecondClass:constructor()
  self.n = self.n + 1
end
try("SecondClass.constructor()", function ()
  assert(SecondClass.constructor ~= FirstClass.constructor)
  return secondClass.constructor
end)
secondClass = SecondClass()
try("secondClass=SecondClass()", function ()
  assert(secondClass.n == 2)
  return secondClass
end)
-- Animals
Animal = luax.Class:new()
try("Animal=luax.Class:new()", function ()
  return Animal
end)
function Animal:constructor(name)
  self.planet = "earth"
  self.name = name
end
Dog = Animal:new()
try("Dog=Animal:new()", function ()
  assert(Dog.super == Animal)
  return Dog
end)
Cat = Animal:new()
try("Cat=Animal:new()", function ()
  assert(Cat.super == Animal)
  return Cat
end)
Lynx = Cat:new()
try("Lynx=Cat:new()", function ()
  assert(Lynx.super == Cat)
  return Lynx
end)
Alien = Animal:new()
function Alien:constructor()
  self.planet = "pluto"
end
try("Alien=Animal:new()", function ()
  return Alien
end)
myDog = Dog("myDog")
anyDog = Dog("anyDog")
anyCat = Cat("anyCat")
wildLynx = Lynx("wildLynx")
alien = Alien()
try("myDog.name", function ()
  assert(myDog.name == "myDog")
  return myDog.name
end)
try("anyDog.planet", function ()
  assert(anyDog.planet == "earth")
  return anyDog.planet
end)
try("alien.name", function ()
  assert(alien.name == nil)
  return alien.name
end)
try("alien.planet", function ()
  assert(alien.planet ~= "earth")
  return alien.planet
end)
try("Cat:is(Animal)", function ()
  assert(Cat:is(Animal) == true)
  return Cat:is(Animal)
end)
try("Cat:is(Cat)", function ()
  assert(Cat:is(Cat) == true)
  return Cat:is(Cat)
end)
try("anyCat:is(Cat)", function ()
  assert(anyCat:is(Cat) == true)
  return anyCat:is(Cat)
end)
try("Lynx:is(Cat)", function ()
  assert(Lynx:is(Cat) == true)
  return Lynx:is(Cat)
end)
try("Cat:is(Lynx)", function ()
  assert(Cat:is(Lynx) == false)
  return Cat:is(Lynx)
end)
try("Lynx:is(Animal)", function ()
  assert(Lynx:is(Animal) == true)
  return Lynx:is(Animal)
end)
try("Alien:is(Animal)", function ()
  assert(Alien:is(Animal) == true)
  return Alien:is(Animal)
end)
try("Alien:is(Dog)", function ()
  assert(Alien:is(Dog) == false)
  return Alien:is(Dog)
end)

print("")
print("--[[Array]]--")
_print("type(Array)", type(luax.Array))
local array = luax.Array(1, 2, 3, 4, 5, 6, 7, 8, 9)
_print("Array()", array)
assert(#array == 9)
_print("Array:pushfirst()", array:pushfirst("0"))
assert(#array == 10)
_print("Array:pushlast()", array:pushlast("10"))
assert(#array == 11)
_print("Array:popfirst()", array:popfirst())
assert(#array == 10)
_print("Array:poplast()", array:poplast())
assert(#array == 9)
_print("Array:first()", array:first())
assert(array:first() == 1)
_print("Array:last()", array:last())
assert(array:last() == 9)
_print("Array:each()", array:each(function (v) return v end))
_print("Array:all(<10)", array:all(function (v) return v < 10 end))
assert(array:all(function (v) return v < 10 end) == true)
_print("Array:count(<10)", array:count(function (v) return v < 10 end))
assert(array:count(function (v) return v < 10 end) == 9)
_print("Array:any(<10)", array:any(function (v) return v < 10 end))
assert(array:any(function (v) return v < 10 end) == true)
_print("Array:none(<10)", array:none(function (v) return v < 10 end))
assert(array:none(function (v) return v < 10 end) == false)
_print("Array:contains(10)", array:contains(10))
assert(array:contains(10) == false)
_print("Array:map('_' + v)", array:copy():map(function (v) return "_" .. v end))
_print("Array:filter(v%2==0)", array:filter(function (v) return tonumber(v) % 2 == 0 end))
_print("Array:split(5)", array:split(5))
_print("Array:invert()", array:invert())
_print("Array:remove(1)", array:copy():remove(1))
_print("Array:clear()", array:copy():clear())
_print("Array:join()", array:join())
_print("Array:join('-')", array:join("-"))

print("")
print("--[[Enum]]--")
_print("type(Enum)", type(Enum))
_print("Enum.ONE", Enum.ONE)
_print("Enum.TWO", Enum.TWO)
_print("Enum.THREE", Enum.THREE)

print("")
print("--[[Fifo]]--")
_print("type(Fifo)", type(luax.Fifo))
local fifo = luax.Fifo(2)
_print("Fifo(2)", fifo)
fifo:push("1", 1)
_print("fifo:push(1)", fifo)
fifo:push("2", 2)
_print("fifo:push(2)", fifo)
fifo:push("3", 3)
_print("fifo:push(3)", fifo)
fifo:clear()
_print("fifo:clear()", fifo)

print("")
print("--[[Hash]]--")
_print("hash(42)", luax.hash(42))

print("")
print("--[[Log]]--")
_print("type(Log)", type(luax.Log))
_print("Log.FILENAME", luax.Log.FILENAME)
_print("Log.FILE", luax.Log.FILE)
_print("Log.verbose(...)", luax.Log.verbose)
_print("Log.debug(...)", luax.Log.debug)
_print("Log.info(...)", luax.Log.info)
_print("Log.warning(...)", luax.Log.warning)
_print("Log.error(...)", luax.Log.error)
_print("Log.wtf(...)", luax.Log.wtf)
_print("Log.close()", luax.Log.close)

print("")
print("--[[Path]]--")
_print("type(Path)", type(luax.Path))
_print("Path.root", luax.Path.root)
_print("Path.dirname(Path.root)", luax.Path.dirname(luax.Path.root))
_print("Path.basename(Path.root)", luax.Path.basename(luax.Path.root))
_print("Path.dirname(main.lua)", luax.Path.dirname(luax.Path.root .. "/main.lua"))
_print("Path.split(Path.root)", luax.Path.split(luax.Path.root))

print("")
print("--[[Signal]]--")
local signal = luax.Signal()
local callback = function () print("signal received!") end
_print("signal.register(1,f())", signal:register(1, callback))
_print("signal.register(2,f())", signal:register(2, callback))
_print("signal.register(1,f())", signal:register(1, callback))
_print("signal.send(1)", signal:send(1))
_print("signal.unregister(1)", signal:unregister(1))
_print("signal.send(1)", signal:send(1))
_print("signal.send(2)", signal:send(2))

print("")
print("--[[String]]--")
local s = "Lorem ipsum"
_print("string:", s)
_print("explode()", s:explode())
_print("starts('Lorem')", s:starts("Lorem"))
_print("ends('Ipsum')", s:ends("Ipsum"))
_print("ends('ipsum')", s:ends("ipsum"))
_print("trim()", (s .. "\n"):trim())
_print("pad(".. #s * 2 ..",'_')", s:pad(#s * 2, "_"))
_print("capitalize()", s:lower():capitalize())
_print("split('hello world',' ')", ("hello\nworld"):split(" "))
_print("split('hello\\nworld','\n')", ("hello\nworld"):split("\n"))
_print("join(',','lorem','ipsum')", luax.join(",", "lorem", "ipsum"))

print("")
print("--[[Utils]]--")
_print("tostring({...})", tostring({"a", "b", "c"}))
_print("loop(2,f(i))", "")
luax.loop(2, function (i) _print("", i) end)
_print("math.randomseed", math.randomseed)
_print("randomboolean()", luax.randomboolean())
_print("randomtable({1,2,3})", luax.randomtable({1, 2, 3}))
_print("math.clamp(1,9,10)", math.clamp(1, 9,10))
_print("math.sign(10)", math.sign(-10))
_print("range(0,-5)", luax.range(0,-5))
_print("range(1,10,2)", luax.range(1, 10, 2))

print("")
print("--[[Version]]--")
print("type(Version)", type(luax.Version))
local oldVersion = luax.Version(1,2,3)
_print("oldVersion=Version(1,2,3)", oldVersion)
_print("oldVersion.major", oldVersion.major)
_print("oldVersion.minor", oldVersion.minor)
_print("oldVersion.patch", oldVersion.patch)
local newVersion = luax.Version(3,2,1)
_print("newVersion=Version(3,2,1)", newVersion)
_print("newVersion<oldVersion", newVersion < oldVersion)
_print("newVersion>oldVersion", newVersion > oldVersion)
_print("oldVersion==newVersion", oldVersion == newVersion)
_print("newVersion==newVersion", newVersion == newVersion)

print("")
print("OK")
